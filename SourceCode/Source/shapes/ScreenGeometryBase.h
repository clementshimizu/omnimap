#ifndef __SCREEN_GEOMETRY_BASE_H__
#define __SCREEN_GEOMETRY_BASE_H__
// OmniMap Geometry Correction Libs
// (c)2006, 2007, 2010 Elumenati

class ScreenRendererBase;

/**
 * \brief A factory for screen shape renderers.
 *
 * This class factory builds objects derived from ScreenRendererBase, used by ScreenGeometryBase for 
 * rendering screens.  OmniMap is shipped with two classes derived from
 * ScreenRendererBase: ScreenRendererOGL(type="OGL") and ScreenRendererD3D(type="D3D"). 
 */
typedef ScreenRendererBase * (* fpScreenRendererCreatorFunction) (void);  // function pointer to a screenshape creator...
class OMNIMAP_API OmniMapScreenRendererFactory
{
private:  // there is private stuff...
	void *ScreenRendererCreatorFunctionMAP;
public:
	/**
	 * \brief Add a new ScreenRendererBase derived class.
	 *
	 * @param type A string that can be used to refer to this screen renderer.
	 * @param functionPointer  A pointer to a function that constructs an object of a type
	 * derived from ScreenRendererBase and returns a pointer to that object.
	 */
	void addScreenRendererCreator(const char * type,fpScreenRendererCreatorFunction functionPointer);
	/**
	 * \brief Create a screen renderer.
	 * 
	 * Creates an object derived from ScreenRendererBase.
	 * @param type The type of screen renderer to create.  This must be a string that has been registered using
	 * OmniMapScreenRendererFactory::addScreenRendererCreator
	 * @returns A pointer to the ScreenRendererBase derived object created.
	 */
	ScreenRendererBase * Create_ScreenRenderer(const char * type);
	/**
	 * \brief Construct an OmniMapScreenRendererFactory
	 */
	OmniMapScreenRendererFactory();
	/**
	 * \brief Destroy an OmniMapScreenRendererFactory
	 */
	virtual ~OmniMapScreenRendererFactory();
};

/**
 * \brief A base class for defining screen shapes.  It has no dependencies
 * on the underlying graphics subsystem.  It provides geometry that defines the screen shape.  The 
 * ScreenGeometryBase::SetRenderer method is used to set an appropriate renderer created by the 
 * OmniMapScreenRendererFactory.  
 */
class OMNIMAP_API ScreenGeometryBase {
public:
	/**
	 * \brief The kinds of vertex buffers that are supported by the screen renderers.
	 */
	typedef enum
	{
		VBT_SIMPLE_VERTEX_FLT = 1,
		VBT_SIMPLE_VERTEX_DBL = 2,
		VBT_VERTEX_TEXCOORD_FLT = 3,
		VBT_VERTEX_TEXCOORD_DBL = 4
	} VertexType;

	typedef enum {
		VBT_TRIANGLES,
		VBT_TRIANGLE_STRIP
	} ShapeType;

	/**
	 * \brief Get the vertex buffer defining the geometry for this screen shape.
	 *
	 * Returns a pointer to the vertex buffer that defines the geometry associated with this shape, along
	 * with the number of vertices and the type of vertex buffer being returned.
	 * @param numVertices Set by this method, the number of vertices in the vertex buffer.
	 * @param vertexType Set by this method, the type of vertex  buffer returned.
	 * @return The vertex buffer.
	 */
	virtual void *GetVertexBuffer(int **numVerticesPerShape, ScreenGeometryBase::VertexType &vertexType,
		ScreenGeometryBase::ShapeType &shapeType, int &numShapes) = 0;
	virtual bool CreateGeometry() = 0;
	virtual bool xyTo3D(float x, float y, float *xyz) { x;y;xyz; return false; }
#ifdef ELUMENATI_INTERNAL
	virtual void WriteObject(void *filePtr, char *name) {}
	virtual const char * getScreenType() { return "NONE"; }
#endif
	/**
	 * \brief Sets the renderer to be used by this object to render its geometry. 
	 *
	 * This is a renderer created by the OmniMapScreenRendererFactory.  It is responsible for rendering the
	 * geometry of this screen shape.
	 *
	 * @param aRenderer The renderer to be used by this screen shape.
	 */
	virtual void SetRenderer(ScreenRendererBase *aRenderer);
	/**
	 * \brief Project the scene generated by the channels onto the display.  
	 *
	 * This method uses the 
	 * ScreenRendererBase object set in ScreenGeometryBase::SetRenderer to actually render its geometry.
	 * Thus, it has no OpenGL or D3D dependencies.  It simply defines the shape of the screen.
	 * 
	 * @param context  The type of parameter is defined by deriving classes.  It is meant to provide
	 * a way for the application to pass a graphics context to the Display method.
	 */
	virtual void Display(void *context) = 0;

	virtual ScreenRendererBase *GetRenderer();

	typedef struct {
		float x, y, z;
	} SimpleVertex;

	typedef struct {
		double x, y, z;
	} SimpleVertexDbl;

	typedef struct {
		float x, y, z;
		int color;
	} ColorVertex;

	typedef struct {
		float u, v;
		float x, y, z;
		
	} TextureCoordVertex;
protected:
	ScreenGeometryBase::VertexType vertexType;
	ScreenRendererBase *renderer;
};

class OMNIMAP_API ScreenRendererBase {
public:
	virtual void ResetGeometry(void *vertexBuffer, ScreenGeometryBase::VertexType vertexType,
		ScreenGeometryBase::ShapeType shapeType, int *vertexCounts, int numShapes) = 0;
	virtual void Display(void *context) = 0;
	virtual ~ScreenRendererBase() {}
	
protected:
	void *vertexBuffer;
	int *vertexCounts;
	int numShapes;
	unsigned int vertexType;
	unsigned int shapeType;

};



#endif